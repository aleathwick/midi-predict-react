{"version":3,"sources":["constants.js","utils.js","components/Controls.js","components/NotesContainer.js","infoContent.js","components/Info.js","App.js","reportWebVitals.js","index.js"],"names":["VALID_EXTENSIONS","remapVelocity","v","lower","upper","Math","min","max","Controls","props","preprocessMidi","midi","subBeatLength","header","tempos","bpm","notes","forEach","note","subbeat","round","time","sort","a","b","preprocessNotes","tracks","setMidiFile","setNotes","setFilteredNotes","filter","bars","console","log","useState","downloadEnabled","setDownloadEnabled","predicting","setPredicting","predictProgress","setPredictProgress","value","ref","useRef","useEffect","current","usePrevious","inputRef","reader","FileReader","addEventListener","Midi","result","length","alert","Paper","id","Typography","variant","type","onChange","e","target","files","selectedFile","Constants","indexOf","name","split","pop","readAsArrayBuffer","Button","color","endIcon","className","onClick","click","disabled","encoder","decoder","midiFile","modelInputs","inputShape","tf","map","floor","modelInputsFromNotes","filteredNotes","summary","modelInputsFormatted","inputs","input","originalName","encoded","predict","batchSize","vnOut","predPromises","i","shape","stepInput","slice","Vn_ar","stepInputFormatted","push","flatten","array","newNotes","cloneDeep","Promise","all","then","pred","p","velocity","newFilteredNotes","CircularProgress","size","remappedNotes","Utils","velocityRange","midiDownload","Object","create","midiBlob","Blob","toArray","elem","window","document","createElement","href","URL","createObjectURL","download","Tooltip","title","fontSize","Slider","defaultValue","getAriaValueText","marks","label","valueLabelDisplay","setBars","setVelocityRange","setInfoOpen","NotesContainer","velocityToColour","remappedVelocity","barLines","bar","style","borderRight","borderColor","borderWidth","gridColumn","gridRow","noteBoxes","enterDelay","backgroundColor","Info","handleClose","descriptionElementRef","React","infoOpen","descriptionElement","focus","Dialog","open","onClose","scroll","aria-labelledby","aria-describedby","DialogTitle","DialogContent","dividers","DialogContentText","tabIndex","DialogActions","encoderPromise","decoderPromise","App","setEncoder","setDecoder","decoderPromse","models","catch","err","message","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"6dAKaA,EAAmB,CAAC,MAAO,Q,SCDjC,SAASC,EAAcC,EAAGC,EAAOC,GACpC,OAAOC,KAAKC,IAAID,KAAKE,KAAKL,EAAIC,EAAQ,MAAQC,EAAQ,IAAMD,EAAQ,KAAM,EAAE,KAAM,G,sCC2CvE,SAASK,EAASC,GAc/B,SAASC,EAAeC,GACtB,IAEMC,EAAgB,GAFVD,EAAKE,OAAOC,OAAO,GAAGC,IF7Dd,GEiDtB,SAAyBC,EAAOJ,GAE9BI,EAAMC,SAAQ,SAAAC,GACZA,EAAKC,QAAUd,KAAKe,MAAMF,EAAKG,KAAOT,MAGxCI,EAAMM,MAAK,SAACC,EAAGC,GACb,OAAOD,EAAEF,KAAOG,EAAEH,QASpBI,CAAgBd,EAAKe,OAAO,GAAGV,MAAOJ,GACtCH,EAAMkB,YAAYhB,GAClBF,EAAMmB,SAASjB,EAAKe,OAAO,GAAGV,OAG9BP,EAAMoB,iBAAiBlB,EAAKe,OAAO,GAAGV,MAAMc,QAAO,SAAAZ,GAAI,OAAIA,EAAKC,QFrE/C,EEqE0DV,EAAMsB,KFtE7D,MEuEpBC,QAAQC,IAAItB,EAAKe,OAAO,GAAGV,OAzBS,MA4BQkB,oBAAS,GA5BjB,mBA4B/BC,EA5B+B,KA4BdC,EA5Bc,OA6BFF,oBAAS,GA7BP,mBA6B/BG,EA7B+B,KA6BnBC,EA7BmB,OA8BQJ,mBAAS,GA9BjB,mBA8B/BK,EA9B+B,KA8BdC,EA9Bc,KAkClCL,EA3CN,SAAqBM,GACnB,IAAMC,EAAMC,mBAIZ,OAHAC,qBAAU,WACRF,EAAIG,QAAUJ,KAETC,EAAIG,QAoCMC,CAAYrC,EAAMsB,QAEAtB,EAAMsB,MACvCK,GAAmB,GAKrB,IAAMW,EAAWJ,mBA4CjB,IAAMK,EAAS,IAAIC,WA4BnB,OA1BAD,EAAOE,iBAAiB,QAAQ,WAC9Bd,GAAmB,GAEnB,IAAMzB,EAAO,IAAIwC,OAAKH,EAAOI,QACzBzC,EAAKe,OAAO2B,OAAS,GAAGC,MAAM,yDAClC5C,EAAeC,MAId,GAkBD,eAAC4C,EAAA,EAAD,CAAOC,GAAG,qBAAV,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,sBASA,uBAAOhB,IAAKK,EAAUS,GAAG,eAAeG,KAAK,OAAOC,SAzBxD,SAAsBC,GAEpB,GAAiB,qBAANA,GAA+C,IAA1BA,EAAEC,OAAOC,MAAMV,OAAc,OAAO,KACpE,IAAMW,EAAeH,EAAEC,OAAOC,MAAM,GACpC/B,QAAQC,IAAI+B,GACRC,EAA2BC,QAAQF,EAAaG,KAAKC,MAAM,KAAKC,QAAU,GAC5ErC,QAAQC,IAAR,yBAA8B+B,EAAaG,OAE3CnB,EAAOsB,kBAAkBN,IAEzBV,MAAM,sBAAD,OAAuBU,EAAaG,KAAKC,MAAM,KAAKC,MAApD,mCAAoFJ,OAgBzF,cAACM,EAAA,EAAD,CACEb,QAAQ,YACRc,MAAM,UACNC,QAAS,cAAC,IAAD,IACTC,UAAU,iBACVC,QAxFN,WACE5B,EAASF,QAAQ+B,SAkFf,uBASA,eAACL,EAAA,EAAD,CACEb,QAAQ,YACRc,MAAM,YACNK,SAA4B,OAAlBpE,EAAMqE,SAAsC,OAAlBrE,EAAMsE,SAAuC,OAAnBtE,EAAMuE,SACpEP,QAAS,cAAC,IAAD,IACTC,UAAU,iBACVC,QA9FN,WACErC,GAAc,GAEd,IAAM2C,EA3EV,SAA8BjE,GAI5B,IAAMkE,EAAa,CAAC,EAAGlE,EAAMqC,OAAQ,GAWrC,MAVkB,CAChB,OAAU8B,IAAWA,IAAUnE,EAAMoE,KAAI,SAAAlE,GACvC,OAAOb,KAAKgF,MAAMnE,EAAKC,QAAL,GF1BA,MACH,GE0BK,CAAC,EAAGH,EAAMqC,OF3BZ,IE4BpB,QAAW8B,IAAWA,IAAUnE,EAAMoE,KAAI,SAAAlE,GACxC,OAAOA,EAAKC,QF7BM,QE8BK,CAAC,EAAGH,EAAMqC,OF9Bf,IE+BpB,OAAU8B,IAAUnE,EAAMoE,KAAI,SAAAlE,GAAI,OAAKA,EAAKP,KFhCzB,IEgCqD,MAAKuE,GAC7E,OAAUC,IAAWA,IAAUnE,EAAMoE,KAAI,SAAAlE,GAAI,OAAKA,EAAKP,KFjCpC,IEiCgE,MAAK,IAAK,CAAC,EAAGK,EAAMqC,OAAQ,MA8D3FiC,CAAqB7E,EAAM8E,eAC/CvD,QAAQC,IAAIxB,EAAMqE,QAAQU,WAK1B,IAJA,IAAIC,EAAuBhF,EAAMqE,QAAQY,OAAON,KAAI,SAAAO,GAAK,OAAIV,EAAYU,EAAMC,iBAC3EC,EAAUpF,EAAMqE,QAAQgB,QAAQL,EAAsB,CAAEM,UAAW,IACnEC,EAAQb,IAAS,CAAC,EAAG,EAAG,IACxBc,EAAe,GARM,WAShBC,GACP1D,EAAmB0D,EAAIL,EAAQM,MAAM,GAAK,KAC1C,IAAIC,EAAY,CAAEP,QAASA,EAAQQ,MAAM,CAAC,EAAGH,EAAG,GAAI,CAAC,EAAG,EAAGL,EAAQM,MAAME,OAAO,GAAG,KAAMC,MAAON,GAC5FO,EAAqB9F,EAAMsE,QAAQW,OAAON,KAAI,SAAAO,GAAK,OAAIS,EAAUT,EAAMC,iBAC3EI,EAAQvF,EAAMsE,QAAQe,QAAQS,EAAoB,CAAER,UAAW,IAE/DE,EAAaO,KAAKR,EAAMS,UAAUC,UAN3BR,EAAI,EAAGA,EAAIL,EAAQM,MAAM,GAAID,IAAM,EAAnCA,GAYT,IAAMS,EAAWC,IAAUnG,EAAMO,OACjC6F,QAAQC,IAAIb,GACTc,MAAK,SAAAC,GACJhF,QAAQC,IAAI+E,GAEZA,EAAK/F,SAAQ,SAACgG,EAAGf,GAAQS,EAAST,GAAGgB,SAAWD,EAAE,MAElDxG,EAAMmB,SAAS+E,GACf,IAAMQ,EAAmBR,EAAS7E,QAAO,SAAAZ,GAAI,OAAIA,EAAKC,QFvHzC,EEuHoDV,EAAMsB,KFxHvD,KEyHhBtB,EAAMoB,iBAAiBsF,GAEvB1G,EAAMuE,SAAStD,OAAO,GAAGV,MAAQ2F,EACjCvE,GAAmB,GACnBE,GAAc,OAsDhB,qBAQaD,GAAc,cAAC+E,EAAA,EAAD,CAAkB1C,UAAU,mBAAmB2C,KAAM,GAAI3D,QAAQ,cAAcjB,MAAOF,OAGjH,cAACgC,EAAA,EAAD,CACEb,QAAQ,YACRc,MAAM,YACNC,QAAS,cAAC,IAAD,IACTC,UAAU,iBACVG,UAAW1C,EACXwC,QAAS,WACP,IAAM2C,EAAgBV,IAAUnG,EAAM8E,eACtC+B,EAAcrG,SAAQ,SAAAC,GAAI,OAAIA,EAAKgG,SAAWK,EAAoBrG,EAAKgG,SAAUzG,EAAM+G,cAAc,GAAI/G,EAAM+G,cAAc,OAC7H,IAAMC,EAAeC,OAAOC,OAAOlH,EAAMuE,UACzCyC,EAAa/F,OAAO,GAAGV,MAAQsG,EAC/B,IAAMM,EAAW,IAAIC,KAAK,CAACJ,EAAaK,WAAY,CAAEnE,KAAM,iBACxDoE,EAAOC,OAAOC,SAASC,cAAc,KACzCH,EAAKI,KAAOH,OAAOI,IAAIC,gBAAgBT,GACvCG,EAAKO,SAAW,iBAEhBP,EAAKnD,SAhBT,iCAyBA,eAACnB,EAAA,EAAD,CAAYiB,UAAU,qBAAqBhB,QAAQ,SAAnD,UACE,cAAC6E,EAAA,EAAD,CAASC,MAAM,mCAAf,SAAkD,cAAC,IAAD,CAAUC,SAAS,QAAQ/D,UAAU,gBACvF,2CAKF,cAACgE,EAAA,EAAD,CACEC,aF7NY,EE8NZC,iBAAkB,SAAAnG,GAAK,gBAAOA,EAAP,UACvBnC,IAAK,EACLC,IAAK,GACLsI,MACE,CACE,CAAEpG,MAAO,EAAGqG,MAAO,UACnB,CAAErG,MAAO,EAAGqG,MAAO,WAEvBC,kBAAsC,OAAnBtI,EAAMuE,SAAoB,MAAQ,OAOrDpB,SAAU,SAACC,EAAG3D,GACZO,EAAMuI,QAAQ9I,GACdO,EAAMoB,iBAAiBpB,EAAMuE,SAAStD,OAAO,GAAGV,MAAMc,QAAO,SAAAZ,GAAI,OAAIA,EAAKC,QFhP/D,EEgP0EjB,EFjPvE,OEoPhB2E,SAA6B,OAAnBpE,EAAMuE,WAElB,eAACvB,EAAA,EAAD,CAAYiB,UAAU,qBAAqBhB,QAAQ,SAAnD,UACE,cAAC6E,EAAA,EAAD,CAASC,MAAM,sDAAf,SAAqE,cAAC,IAAD,CAAUC,SAAS,QAAQ/D,UAAU,gBAC1G,uDAIF,cAACgE,EAAA,EAAD,CACEpI,IAAK,EACLC,IAAK,IACLsI,MAIE,CACE,CAAEpG,MAAO,EAAGqG,MAAO,KACnB,CAAErG,MAAO,IAAKqG,MAAO,QAEzBrG,MAAOhC,EAAM+G,cACbuB,kBAAkB,OAGlBnF,SAAU,SAACC,EAAG3D,GAAQO,EAAMwI,iBAAiB/I,IAC7C2E,SAA6B,OAAnBpE,EAAMuE,WAGlB,cAACT,EAAA,EAAD,CACEb,QAAQ,YACRc,MAAM,UACNC,QAAS,cAAC,IAAD,IACTC,UAAU,+BACVC,QAAS,kBAAMlE,EAAMyI,aAAY,IALnC,qBCzQS,SAASC,EAAe1I,GAErC,SAAS2I,EAAiBlC,GACxB,IAAMmC,EAAmB9B,EAAoBL,EAAUzG,EAAM+G,cAAc,GAAI/G,EAAM+G,cAAc,IACnG,MAAM,OAAN,OAAiC,IAAnB6B,EAAd,gBAIF,IADA,IAAMC,EAAW,GACTC,EAAM,EAAGA,EAAM9I,EAAMsB,KAAMwH,IACjCvH,QAAQC,IHdS,EGcJsH,EHfO,GGgBrBD,EAAS9C,KACR,qBACAgD,MAAO,CAELC,YAAa,QACbC,YAAa,qBACbC,YAAa,MAIbC,WHzBe,EGyBFL,EH1BK,EG2BlBM,QAAS,aAMb,IAAMC,EAAarJ,EAAM8E,cAAgB9E,EAAM8E,cAAcH,KAAI,SAAAlE,GAE/D,OACE,cAACqH,EAAA,EAAD,CACAwB,WAAW,IACXvB,MAAO,sBAAKgB,MAAO,CAAC,WAAc,OAA3B,uBACMnJ,KAAKe,MAAsB,IAAhBF,EAAKgG,UAAgB,uBADtC,oBAEa7G,KAAKe,MAA2F,IAArFmG,EAAoBrG,EAAKgG,SAAUzG,EAAM+G,cAAc,GAAI/G,EAAM+G,cAAc,KAAW,uBAFlH,iBAGUtG,EAAKP,KAAO,GAAK,MALlC,SAOE,qBACE+D,UAAU,WACV8E,MAAO,CAAEI,WAAY1I,EAAKC,QAAU,EAAG0I,QAAS,IAAM3I,EAAKP,KH9C9C,GG8CyE,GAAIqJ,gBAAiBZ,EAAiBlI,EAAKgG,kBAIpI,GAGL,OACE,eAAC3D,EAAA,EAAD,CAAOC,GAAG,kBAAkBgG,MAC1B,CAAE,oBAAsB,UAAtB,OHrDa,EGqDoB/I,EAAMsB,KHtDvB,EGsDhB,WADJ,UAGGuH,EACAQ,KC3DA,I,6CCgBQ,SAASG,EAAKxJ,GAEzB,IAAMyJ,EAAc,WAChBzJ,EAAMyI,aAAY,GAClBlH,QAAQC,IAAI,WAGVkI,EAAwBC,IAAMzH,OAAO,MAU3C,OATAyH,IAAMxH,WAAU,WACZ,GAAInC,EAAM4J,SAAU,CAAC,IACAC,EAAuBH,EAAhCtH,QACmB,OAAvByH,GACAA,EAAmBC,WAG5B,CAAC9J,EAAM4J,WAGN,eAACG,EAAA,EAAD,CACIC,KAAMhK,EAAM4J,SACZK,QAASR,EACTS,OAAQ,OACRC,kBAAgB,sBAChBC,mBAAiB,4BALrB,UAOI,cAACC,EAAA,EAAD,CAAatH,GAAG,sBAAhB,kBACA,cAACuH,EAAA,EAAD,CAAeC,SAAU,OAAzB,SACI,eAACC,EAAA,EAAD,CACIzH,GAAG,4BACHd,IAAKyH,EACLe,UAAW,EAHf,UAKI,6JAGA,gGAEI,+BACI,0DACA,8FACA,qMAEA,gGAGR,oDAEI,+BACI,+BAAI,mBAAG/C,KAAK,6GAAR,4BAAJ,uBACA,+BAAI,mBAAGA,KAAK,sDAAR,yBAAJ,mFAMhB,cAACgD,EAAA,EAAD,UACI,cAAC5G,EAAA,EAAD,CAAQI,QAASuF,EAAa1F,MAAM,UAApC,wBC5DhB,IAAM4G,EAAiBjG,IAAmB,sDACpCkG,EAAiBlG,IAAmB,sDAqD3BmG,MAnDf,SAAa7K,GAAQ,IAAD,EACcyB,mBAAS,MADvB,mBACX8C,EADW,KACDrD,EADC,OAEQO,mBAAS,MAFjB,mBAEXlB,EAFW,KAEJY,EAFI,OAGwBM,mBAAS,MAHjC,mBAGXqD,EAHW,KAGI1D,EAHJ,OAIMK,mBNfN,GMWA,mBAIXH,EAJW,KAILiH,EAJK,OAKY9G,mBAASkJ,GALrB,mBAKXtG,EALW,KAKFyG,EALE,OAMYrJ,mBAASmJ,GANrB,mBAMXtG,EANW,KAMFyG,EANE,OAOwBpB,IAAMlI,SAAS,CAAC,EAAG,MAP3C,mBAOXsF,EAPW,KAOIyB,EAPJ,OAQcmB,IAAMlI,UAAS,GAR7B,mBAQXmI,EARW,KAQDnB,EARC,KAqBlB,OAXArC,QAAQC,IAAI,CAACrG,EAAM2K,eAAgB3K,EAAMgL,gBACtC1E,MAAK,SAAA2E,GAEJH,EAAWG,EAAO,IAClBF,EAAWE,EAAO,OAEnBC,OAAM,SAAUC,GACf5J,QAAQC,IAAI,wBACZD,QAAQC,IAAI2J,EAAIC,YAIlB,sBAAKrI,GAAG,gBAAR,UACE,cAAChD,EAAD,CACAwE,SAAUA,EACVrD,YAAaA,EACbX,MAAOA,EACPY,SAAUA,EACV2D,cAAeA,EACf1D,iBAAkBA,EAClB2F,cAAeA,EACfyB,iBAAkBA,EAClBC,YAAaA,EACbnH,KAAMA,EACNiH,QAASA,EACTlE,QAASA,EACTC,QAASA,IAET,cAACoE,EAAD,CACE5D,cAAeA,EACfxD,KAAMA,EACNyF,cAAeA,IAEjB,cAAC,EAAD,CACA6C,SAAUA,EACVnB,YAAaA,QChDJ4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBjF,MAAK,YAAkD,IAA/CkF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCRX,EAAiBjG,IAAmB,uDACpCsG,EAAgBtG,IAAmB,uDAEzC0B,QAAQC,IAAI,CAACsE,EAAgBK,IAC1B1E,MAAK,SAAA2E,GACJ1J,QAAQC,IAAI,iCAIhBqK,IAASC,OACL,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CACEpB,eAAgBA,EAChBK,cAAeA,MAGnBxD,SAASwE,eAAe,SAM5BX,M","file":"static/js/main.1a776bf3.chunk.js","sourcesContent":["export const DEFAULT_FILE = 'example.mid';\r\nexport const MIDI_A0 = 22;\r\nexport const SUBBEATS = 4;\r\nexport const BEATS = 4;\r\nexport const BARS = 8;\r\nexport const VALID_EXTENSIONS = ['mid', 'midi'];\r\n// upper and lower limits for remapping velocity\r\nexport const STRETCH_UPPER = 105 / 127\r\nexport const STRETCH_LOWER = 10 / 127","export default function getNotes(midi){ \r\n    return midi.tracks[0].notes\r\n}\r\n\r\nexport function remapVelocity(v, lower, upper){\r\n    return Math.min(Math.max((v - lower / 127) / (upper / 127 - lower / 127), 1/127), 1)\r\n    // Math.min(Math.max((velocity - props.velocityRange[0] / 127) / (props.velocityRange[1] / 127 - props.velocityRange[0] / 127), 0), 1\r\n}\r\n\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Button from '@material-ui/core/Button'\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport CloudUploadIcon from '@material-ui/icons/Publish';\r\nimport CloudDownloadIcon from '@material-ui/icons/GetApp';\r\nimport InfoIcon from '@material-ui/icons/Info'\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Midi } from '@tonejs/midi'\r\nimport * as Constants from '../constants'\r\nimport Slider from '@material-ui/core/Slider';\r\nimport * as Utils from '../utils'\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport cloneDeep from \"lodash.clonedeep\";\r\n\r\n// disable download button if bars changes\r\n// some kind of visual, showing distribution of velocities?\r\n// add in loading screen: https://material-ui.com/components/backdrop/\r\n\r\nfunction modelInputsFromNotes(notes) {\r\n  // tensorflowjs docs SAYS that a dictionary of named inputs can be passed in... but problems include:\r\n  // -- ordinary dictionary structure doesn't work\r\n  // -- [{input1: data}, {input2: data}] is recognized as tensors, but doesn't seem to work later on\r\n  const inputShape = [1, notes.length, 1]\r\n  let modelInputs = {\r\n    'TBn_in': tf.reshape(tf.oneHot(notes.map(note => { // note starts (beats), BEATS bit vectors\r\n      return Math.floor(note.subbeat % (Constants.SUBBEATS * 4) / Constants.SUBBEATS)\r\n    }), Constants.BEATS), [1, notes.length, Constants.SUBBEATS]),\r\n    'TSBn_in': tf.reshape(tf.oneHot(notes.map(note => {  // note starts (sub-beats), SUBBEATS bit vectors\r\n      return note.subbeat % Constants.SUBBEATS\r\n    }), Constants.SUBBEATS), [1, notes.length, Constants.SUBBEATS]),\r\n    'PSn_in': tf.tensor(notes.map(note => (note.midi - Constants.MIDI_A0) / 88), inputShape), // pitch cont., scalar\r\n    'PCn_in': tf.reshape(tf.oneHot(notes.map(note => (note.midi - Constants.MIDI_A0) % 12), 12), [1, notes.length, 12]) // pitch class., 12 bit vectors\r\n  };\r\n  return modelInputs;\r\n}\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\n\r\nexport default function Controls(props) {\r\n\r\n  // quantize and sort notes\r\n  function preprocessNotes(notes, subBeatLength) {\r\n    // add property with quantized version of note starts\r\n    notes.forEach(note => {\r\n      note.subbeat = Math.round(note.time / subBeatLength);\r\n    });\r\n    // sort notes by note start time\r\n    notes.sort((a, b) => {\r\n      return a.time - b.time\r\n    })\r\n  }\r\n\r\n  function preprocessMidi(midi) {\r\n    const bpm = midi.header.tempos[0].bpm;\r\n    // subbeat length in seconds\r\n    const subBeatLength = 60 / bpm / Constants.SUBBEATS;\r\n    // quantize and sort notes\r\n    preprocessNotes(midi.tracks[0].notes, subBeatLength)\r\n    props.setMidiFile(midi)\r\n    props.setNotes(midi.tracks[0].notes)\r\n    // create list of notes in first x bars\r\n    // number of sub beats doesn't account for 0 indexing, so condition is not strictly less than\r\n    props.setFilteredNotes(midi.tracks[0].notes.filter(note => note.subbeat < (props.bars * Constants.BEATS * Constants.SUBBEATS)))\r\n    console.log(midi.tracks[0].notes)\r\n  }\r\n\r\n  const [downloadEnabled, setDownloadEnabled] = useState(false)\r\n  const [predicting, setPredicting] = useState(false)\r\n  const [predictProgress, setPredictProgress] = useState(0)\r\n  \r\n  const prevBars = usePrevious(props.bars)\r\n\r\n  if (downloadEnabled & prevBars !== props.bars) {\r\n    setDownloadEnabled(false)\r\n  }\r\n\r\n\r\n  // get a reference for the input element, so it can be triggered\r\n  const inputRef = useRef()\r\n  function getInput() {\r\n    inputRef.current.click();\r\n  }\r\n\r\n  function predictVelocity() {\r\n    setPredicting(true)\r\n    // don't want this in place - want to use setState to replace previous midi\r\n    const modelInputs = modelInputsFromNotes(props.filteredNotes)\r\n    console.log(props.encoder.summary());\r\n    let modelInputsFormatted = props.encoder.inputs.map(input => modelInputs[input.originalName]);\r\n    let encoded = props.encoder.predict(modelInputsFormatted, { batchSize: 1 });\r\n    let vnOut = tf.zeros([1, 1, 1]);\r\n    let predPromises = [];\r\n    for (let i = 0; i < encoded.shape[1]; i++) {\r\n      setPredictProgress(i / encoded.shape[1] * 100)\r\n      let stepInput = { encoded: encoded.slice([0, i, 0], [1, 1, encoded.shape.slice(-1)[0]]), Vn_ar: vnOut };\r\n      let stepInputFormatted = props.decoder.inputs.map(input => stepInput[input.originalName])\r\n      vnOut = props.decoder.predict(stepInputFormatted, { batchSize: 1 });\r\n      // tensor.array() turns a tensor into an array, returning a promise\r\n      predPromises.push(vnOut.flatten().array())\r\n    }\r\n    // when all the prediction promises are fulfilled\r\n    // - update note velocities of midiFile \r\n    // - regenerate filteredNotes\r\n    // - set up download\r\n    const newNotes = cloneDeep(props.notes)\r\n    Promise.all(predPromises)\r\n      .then(pred => {\r\n        console.log(pred)\r\n        // notes.forEach((note, i) => note.velocity = remapVelocity(pred[i][0]))\r\n        pred.forEach((p, i) => { newNotes[i].velocity = p[0] })\r\n        // props.setMidiFile(newMidiFile)\r\n        props.setNotes(newNotes)\r\n        const newFilteredNotes = newNotes.filter(note => note.subbeat < (props.bars * Constants.BEATS * Constants.SUBBEATS))\r\n        props.setFilteredNotes(newFilteredNotes)\r\n\r\n        props.midiFile.tracks[0].notes = newNotes\r\n        setDownloadEnabled(true)\r\n        setPredicting(false)\r\n      })\r\n  }\r\n\r\n  // reader, for reading the received file\r\n  const reader = new FileReader();\r\n  // when file is loaded, process\r\n  reader.addEventListener('load', function () {\r\n    setDownloadEnabled(false)\r\n    // read file into new Midi object\r\n    const midi = new Midi(reader.result);\r\n    if (midi.tracks.length > 1) alert(\"midi file has more than one track, first will be used\");\r\n    preprocessMidi(midi)\r\n\r\n\r\n    // processMidi(midi);\r\n  }, false)\r\n\r\n  // function for dealing with file selection (attach as onChange event handler)\r\n  function fileReceived(e) {\r\n    // if user clicks 'cancel' on file dialogue, the filelist might be zero\r\n    if (typeof e === 'undefined' || e.target.files.length === 0) return null;\r\n    const selectedFile = e.target.files[0];\r\n    console.log(selectedFile)\r\n    if (Constants.VALID_EXTENSIONS.indexOf(selectedFile.name.split('.').pop()) >= 0) {\r\n      console.log(`Selected file: ${selectedFile.name}`)\r\n      // when the file has been read in, it will trigger the on load reader event\r\n      reader.readAsArrayBuffer(selectedFile);\r\n    } else {\r\n      alert(`The file extension ${selectedFile.name.split('.').pop()} is invalid, must be in ${Constants.VALID_EXTENSIONS}`);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Paper id=\"controls-container\">\r\n      <Typography variant='h4'>Controls</Typography>\r\n\r\n      {/* one way of sorting input button, which is more difficult to get working with layout. see https://material-ui.com/guides/composition/  */}\r\n      {/* <input accept=\"image/*\" id=\"hidden-input\" type=\"file\" />\r\n      <label htmlFor='hidden-input' className='control-button'>\r\n        <Button variant=\"contained\" color='primary' endIcon={<CloudUploadIcon />} className='control-button' component=\"span\">\r\n          Load File\r\n        </Button>\r\n      </label> */}\r\n      <input ref={inputRef} id=\"hidden-input\" type=\"file\" onChange={fileReceived} />\r\n      <Button\r\n        variant=\"contained\"\r\n        color='primary'\r\n        endIcon={<CloudUploadIcon />}\r\n        className='control-button'\r\n        onClick={getInput}\r\n      >\r\n        Load File\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        color='secondary'\r\n        disabled={props.encoder === null || props.decoder === null || props.midiFile === null}\r\n        endIcon={<MusicNoteIcon />}\r\n        className='control-button'\r\n        onClick={predictVelocity}\r\n      >\r\n          Predict {predicting && <CircularProgress className='predict-progress' size={24} variant='determinate' value={predictProgress}/>}\r\n      </Button>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color='secondary'\r\n        endIcon={<CloudDownloadIcon />}\r\n        className='control-button'\r\n        disabled={!downloadEnabled}\r\n        onClick={() => {\r\n          const remappedNotes = cloneDeep(props.filteredNotes)\r\n          remappedNotes.forEach(note => note.velocity = Utils.remapVelocity(note.velocity, props.velocityRange[0], props.velocityRange[1]))\r\n          const midiDownload = Object.create(props.midiFile)\r\n          midiDownload.tracks[0].notes = remappedNotes\r\n          const midiBlob = new Blob([midiDownload.toArray()], { type: \"octet/stream\" })\r\n          var elem = window.document.createElement('a');\r\n          elem.href = window.URL.createObjectURL(midiBlob);\r\n          elem.download = 'prediction.mid';\r\n          // document.body.appendChild(elem);\r\n          elem.click();\r\n        }}\r\n      // or, not using onClick, can do it like this, making the download link elsewhere:\r\n      // href={midiDownloadLink}\r\n      // download=\"output.midi\"\r\n      >\r\n        Download Prediction\r\n      </Button>\r\n\r\n      <Typography className='slider-description' variant='button'>\r\n        <Tooltip title='Select the number of bars to use'><InfoIcon fontSize='small' className='info-icon' /></Tooltip>\r\n        <span>\r\n          Bars\r\n        </span>\r\n      </Typography>\r\n\r\n      <Slider\r\n        defaultValue={Constants.BARS}\r\n        getAriaValueText={value => `${value} bars`}\r\n        min={1}\r\n        max={12}\r\n        marks={\r\n          [\r\n            { value: 4, label: '4 bars' },\r\n            { value: 8, label: '8 bars' }\r\n          ]}\r\n        valueLabelDisplay={props.midiFile === null ? 'off' : 'auto'}\r\n        // Could do this updating only on mouse up, but then if the mouse is moved off before mouse up...\r\n        // onMouseUp={(e) => {\r\n        //   const newBars = parseInt(e.target.ariaValueNow);\r\n        //   props.setBars(newBars);\r\n        //   props.setFilteredNotes(props.midiFile.tracks[0].notes.filter(note => note.subbeat < (newBars * Constants.BEATS * Constants.SUBBEATS)))\r\n        // }\r\n        onChange={(e, v) => {\r\n          props.setBars(v);\r\n          props.setFilteredNotes(props.midiFile.tracks[0].notes.filter(note => note.subbeat < (v * Constants.BEATS * Constants.SUBBEATS)))\r\n        }\r\n        }\r\n        disabled={props.midiFile === null}\r\n      />\r\n      <Typography className='slider-description' variant='button'>\r\n        <Tooltip title='Select the minimum and maximum MIDI velocity values'><InfoIcon fontSize='small' className='info-icon' /></Tooltip>\r\n        <span>\r\n          Velocity Scaling\r\n        </span>\r\n      </Typography>\r\n      <Slider\r\n        min={0}\r\n        max={127}\r\n        marks={\r\n            // COULD do this to show breaks marks for each note velocity...\r\n            // props.filteredNotes.map(note => ({ value: note.velocity * 127 }))\r\n            // }\r\n          [\r\n            { value: 0, label: '0' },\r\n            { value: 127, label: '127' }\r\n          ]}\r\n        value={props.velocityRange}\r\n        valueLabelDisplay=\"auto\"\r\n        // need to fix this\r\n        // onMouseUp={(e) => {const newValue = parseInt(e.target.ariaValueNow); props.setVelocityRange(newValue); updateMidi(props.midiFile, newValue)}}\r\n        onChange={(e, v) => { props.setVelocityRange(v)}}\r\n        disabled={props.midiFile === null}\r\n      />\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color='primary'\r\n        endIcon={<InfoIcon />}\r\n        className='control-button bottom-button'\r\n        onClick={() => props.setInfoOpen(true)}\r\n      >\r\n        Info\r\n      </Button>\r\n    </Paper>\r\n    \r\n\r\n\r\n  )\r\n}\r\n\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Paper from '@material-ui/core/Paper'\r\nimport * as Constants from '../constants'\r\nimport * as Utils from '../utils'\r\n\r\n\r\nexport default function NotesContainer(props) {\r\n\r\n  function velocityToColour(velocity) {\r\n    const remappedVelocity = Utils.remapVelocity(velocity, props.velocityRange[0], props.velocityRange[1])\r\n    return `hsl(${remappedVelocity * 150}, 100%, 50%)`\r\n  }\r\n\r\n  const barLines = []\r\n  for(var bar = 1; bar < props.bars; bar++){\r\n    console.log((bar) * Constants.BEATS * Constants.SUBBEATS)\r\n   barLines.push(\r\n    <div\r\n    style={{\r\n      // backgroundColor: 'rgba(1, 1, 1, 0.03)',\r\n      borderRight: 'solid',\r\n      borderColor: 'rgba(1, 1, 1, 0.1)',\r\n      borderWidth: '1px',\r\n      // margin: `${10/props.bars}px`,\r\n      // could set loop to bar+=2, and use a whole bar background shading effect:\r\n      // gridColumn: `${(bar) * Constants.BEATS * Constants.SUBBEATS + 1} / ${(bar) * Constants.BEATS * Constants.SUBBEATS + 1 + 16}`,\r\n      gridColumn: (bar) * Constants.BEATS * Constants.SUBBEATS,\r\n      gridRow: '1 / -1',\r\n    }}>\r\n\r\n  </div>\r\n  )}\r\n\r\n  const noteBoxes = (props.filteredNotes ? props.filteredNotes.map(note => {\r\n    // this will create a warning about each child having a unique key, but this doesn't really matter, as order is always the same\r\n    return (\r\n      <Tooltip\r\n      enterDelay='0'\r\n      title={<div style={{'whiteSpace': 'pre'}}>\r\n        Velocity: {Math.round(note.velocity * 127)}<br/>\r\n        Scaled Velocity: {Math.round(Utils.remapVelocity(note.velocity, props.velocityRange[0], props.velocityRange[1]) * 127)}<br/>\r\n        Pitch class: {(note.midi - 4) % 12}\r\n          </div>}>\r\n        <div\r\n          className='note-box'\r\n          style={{ gridColumn: note.subbeat + 1, gridRow: 88 - (note.midi - Constants.MIDI_A0 + 1), backgroundColor: velocityToColour(note.velocity) }}\r\n        />\r\n      </Tooltip>\r\n    )\r\n  }) : []\r\n  )\r\n\r\n  return (\r\n    <Paper id=\"notes-container\" style={\r\n      { 'gridTemplateColumns': `repeat(${props.bars * Constants.BEATS * Constants.SUBBEATS}, 1fr)` }\r\n    }>\r\n      {barLines}\r\n      {noteBoxes}\r\n    </Paper>\r\n  )\r\n}","export const infoContent = `Some test content\r\n`","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { infoContent } from '../infoContent'\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\n\r\n// adapted from https://material-ui.com/components/dialogs/\r\nexport default function Info(props) {\r\n\r\n    const handleClose = () => {\r\n        props.setInfoOpen(false);\r\n        console.log('closed')\r\n    };\r\n\r\n    const descriptionElementRef = React.useRef(null);\r\n    React.useEffect(() => {\r\n        if (props.infoOpen) {\r\n            const { current: descriptionElement } = descriptionElementRef;\r\n            if (descriptionElement !== null) {\r\n                descriptionElement.focus();\r\n            }\r\n        }\r\n    }, [props.infoOpen]);\r\n\r\n    return (\r\n        <Dialog\r\n            open={props.infoOpen}\r\n            onClose={handleClose}\r\n            scroll={'body'}\r\n            aria-labelledby=\"scroll-dialog-title\"\r\n            aria-describedby=\"scroll-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"scroll-dialog-title\">Info</DialogTitle>\r\n            <DialogContent dividers={'body'}>\r\n                <DialogContentText\r\n                    id=\"scroll-dialog-description\"\r\n                    ref={descriptionElementRef}\r\n                    tabIndex={-1}\r\n                >\r\n                    <p>\r\n                        This website provides a simple interface to deep learning models designed to predict velocities of notes in piano sequences.\r\n                    </p>\r\n                    <p>\r\n                        For MIDI files to work properly with this website, they should:\r\n                        <ul>\r\n                            <li>Be in 4/4 time signature</li>\r\n                            <li>Have a tempo that accurately reflects the tempo of the music</li>\r\n                            <li>Have notes that fall closest in time to the timestamp of the actual nearest semi-quaver/16th as determined by the tempo\r\n                            (so that notes can be quantized accurately)</li>\r\n                            <li>Contain all notes for prediction in the first midi track</li>\r\n                        </ul>\r\n                    </p>\r\n                    <p>\r\n                        For more info, see:\r\n                        <ul>\r\n                            <li><a href='https://soundcloud.com/user-611170338/sets/deep-learning-and-music-humanizing-piano-scores-longer-examples'>Audio examples</a> of model outputs</li>\r\n                            <li><a href='https://github.com/aleathwick/781-piano-autoencoder'>Github repo</a>, including datasets and code for parsing data and training models</li>\r\n                        </ul>\r\n                    </p>\r\n\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    Close\r\n            </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport Controls from './components/Controls'\nimport NotesContainer from './components/NotesContainer'\nimport Info from './components/Info'\nimport * as tf from '@tensorflow/tfjs';\nimport * as Constants from './constants'\n\n\nconst encoderPromise = tf.loadLayersModel('models/532_tfjs_best_val_encoder_no_seq/model.json');\nconst decoderPromise = tf.loadLayersModel('models/532_tfjs_best_val_decoder_no_seq/model.json');\n\nfunction App(props) {\n  const [midiFile, setMidiFile] = useState(null);\n  const [notes, setNotes] = useState(null);\n  const [filteredNotes, setFilteredNotes] = useState(null);\n  const [bars, setBars] = useState(Constants.BARS)\n  const [encoder, setEncoder] = useState(encoderPromise);\n  const [decoder, setDecoder] = useState(decoderPromise);\n  const [velocityRange, setVelocityRange] = React.useState([0, 127]);\n  const [infoOpen, setInfoOpen] = React.useState(false);\n\n  Promise.all([props.encoderPromise, props.decoderPromse])\n    .then(models => {\n      // this is happening >10 times. At least the model load is only happening once.\n      setEncoder(models[0])\n      setDecoder(models[1])\n    })\n    .catch(function (err) {\n      console.log('model failed to load')\n      console.log(err.message)\n    })\n\n  return (\n    <div id=\"app-container\">\n      <Controls\n      midiFile={midiFile}\n      setMidiFile={setMidiFile}\n      notes={notes}\n      setNotes={setNotes}\n      filteredNotes={filteredNotes}\n      setFilteredNotes={setFilteredNotes}\n      velocityRange={velocityRange}\n      setVelocityRange={setVelocityRange}\n      setInfoOpen={setInfoOpen}\n      bars={bars}\n      setBars={setBars}\n      encoder={encoder}\n      decoder={decoder}\n      />\n      <NotesContainer\n        filteredNotes={filteredNotes}\n        bars={bars}\n        velocityRange={velocityRange}\n      />\n      <Info\n      infoOpen={infoOpen}\n      setInfoOpen={setInfoOpen}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as tf from '@tensorflow/tfjs';\n\n\nconst encoderPromise = tf.loadLayersModel('/models/532_tfjs_best_val_encoder_no_seq/model.json')\nconst decoderPromse = tf.loadLayersModel('/models/532_tfjs_best_val_decoder_no_seq/model.json')\n\nPromise.all([encoderPromise, decoderPromse])\n  .then(models => {\n    console.log('models loaded successfully')\n  }\n  )\n\nReactDOM.render(\n    <React.StrictMode>\n      <App\n        encoderPromise={encoderPromise}\n        decoderPromse={decoderPromse}\n      />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}